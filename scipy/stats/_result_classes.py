# This module exists only to allow Sphinx to generate docs
# for the result objects returned by some functions in stats
# _without_ adding them to the main stats documentation page.

"""
Result classes used in :mod:`scipy.stats`
-----------------------------------------

.. currentmodule:: scipy.stats._result_classes

.. autosummary::
   :toctree: generated/

   RelativeRiskResult
   BinomTestResult
   TukeyHSDResult
   FitResult

Errors used in :mod:`scipy.stats`
---------------------------------

.. currentmodule:: scipy.stats._result_classes

.. autosummary::
   :toctree: generated/

   FitError
   FitDataError
   FitSolverError

Warnings used in :mod:`scipy.stats`
-----------------------------------

.. currentmodule:: scipy.stats._result_classes

.. autosummary::
   :toctree: generated/

   BootstrapDegenerateDistributionWarning
   F_onewayConstantInputWarning
   F_onewayBadInputSizesWarning
   PearsonRConstantInputWarning
   PearsonRNearConstantInputWarning
   SpearmanRConstantInputWarning

"""
# Import classes below to allow Sphinx to render the documentation above
#
# Add classes to __all__ to make it easy to import them from the private
# `scipy.stats_result_classes` namespace.
#
# Classes included above but not added to __all__ here have already been added
# to the `stats` namespace. This should be done sparingly, and as with any
# addition to the public API, must be approved by the scipy-dev mailing list.

# # Results
__all__ = ['BinomTestResult', 'RelativeRiskResult', 'TukeyHSDResult',
           'FitResult']

# Errors
__all__ = ['SciPyStatsError', 'FitError', 'FitDataError',
           'FitSolverError']

# Warnings
__all__ += ['BootstrapDegenerateDistributionWarning', 'SciPyStatsWarning']

# # Results
from ._binomtest import BinomTestResult
from ._relative_risk import RelativeRiskResult
from ._hypotests import TukeyHSDResult
# from ._stats_py import PearsonRResult  # hard to resolve circular imports
from ._fit import FitResult


### Warnings

class SciPyStatsWarning(RuntimeWarning):
    """Represents a runtime warning specific to `scipy.stats`"""


class BootstrapDegenerateDistributionWarning(SciPyStatsWarning):
    """
    Warning generated by `bootstrap` when BCa method is used and
    the bootstrap distribution is degenerate.
    """

    def __init__(self, msg=None):
        if msg is None:
            msg = ("The bootstrap distribution is degenerate; the "
                   "confidence interval is not defined.")
        self.args = (msg,)

### Errors

class SciPyStatsError(RuntimeError):
    """Represents a runtime error specific to `scipy.stats`"""


class FitError(SciPyStatsError):
    """Represents an error condition when fitting a distribution to data"""
    pass


class FitDataError(ValueError):
    # This exception is raised by, for example, beta_gen.fit when both floc
    # and fscale are fixed and there are values in the data not in the open
    # interval (floc, floc+fscale).
    def __init__(self, distr, lower, upper):
        self.args = (
            "Invalid values in `data`.  Maximum likelihood "
            "estimation with {distr!r} requires that {lower!r} < "
            "(x - loc)/scale  < {upper!r} for each x in `data`.".format(
                distr=distr, lower=lower, upper=upper),
        )


class FitSolverError(RuntimeError):
    # This exception is raised by, for example, beta_gen.fit when
    # optimize.fsolve returns with ier != 1.
    def __init__(self, mesg):
        emsg = "Solver for the MLE equations failed to converge: "
        emsg += mesg.replace('\n', '')
        self.args = (emsg,)
