:orphan:

.. _cython-cxx:

Wrapping C++ Code with Cython
=============================

You don't have to be an experienced C++ developer to wrap simple C++
code with `Cython`_: if you can get the code to run, you can probably
wrap it.  This document is intended as supplement to the
`Cython documentation`_ that addresses writing wrappers in the context of
SciPy.

C++ programs typically consist of two kinds of files:

- `Header`_ (e.g. ``*.h``) files declare the functions and classes that will be
  used in a C++ program, outlining basic information like names and data types
  of inputs and outputs.

- Implementation (e.g. ``*.cpp``) go further, providing specific instructions
  that effect the desired behavior of these functions and classes.

A Cython wrapper for such a program typically also consists of two kinds of
files, and it may be helpful to think of them as counterparts to the headers
and implementation files of C++.

- |pxd|_ files are like headers, identifying which functions and classes you
  want to use from a ``*.h`` file.

- |pyx|_ files are like implementations, providing specific instructions that
  allow you to use these functions and classes from Python.

That's enough theory to get started. Let's jump straight into an exercise.

Exercise 1
----------

#. Update Cython and create a new branch
   (e.g., ``git checkout -b cython_test``) in which to make some
   experimental changes to SciPy.

#. Add a simple C++ header in the ``/scipy/stats`` directory, say
   ``/scipy/stats/cpp_declaration.h``. For example:

   ::

        #ifndef CPP_DECLARATION_H
        #define CPP_DECLARATION_H

        int hello_world();

        #endif

    The lines beginning with ``#`` are `header guards`_ commonly seen in
    C++ header files; ``int hello_world();`` declares a function called
    ``hello_world`` that accepts no arguments and returns an integer.

#. Add an implementation in the ``/scipy/stats`` directory, say
   ``/scipy/stats/cpp_implementation.cpp``. For example:

   ::

        #include <iostream>
        #include "cpp_declaration.h"

        int hello_world() {
            std::cout << "Hello World!" << std::endl;
            return 0;
        }

    The ``#include`` `preprocessor directives`_ are somewhat like Python
    ``import`` statements, allowing the use of functions and classes declared
    ``iostream`` and ``cpp_declaration.h`` to be used in the present file.
    Here, we *implement* the ``hello_world`` function *declared* in the header:
    accept no arguments, print ``"Hello World!"`` to the console, and return
    the integer ``0``.

There three things you need to do in order to make the ``hello_world``
function accessible from Python:

#. Add a ``.pxd`` file in the ``/scipy/stats`` directory, say
   ``/scipy/stats/cy_declaration.pxd``:

   ::

       cdef extern from "cpp_declaration.h":
           int hello_world()

   This declares that you want to be able to use the ``hello_world`` function
   in Cython.

#. Add a ``.pyx`` file in the ``/scipy/stats`` directory, say
   ``/scipy/stats/cy_implementation.pyx``:

   ::

       # distutils: language = c++

       from .cy_declaration cimport hello_world

       def cy_hello_world():
           hello_world()

   The ``cimport`` statement allows the use of the C++ ``hello_world``
   function declared in ``cy_declaration.pxd`` in the present file, then we
   define the Cython function ``cy_hello_world``, which simply calls
   ``hello_world()``!

   Cython automatically converts the ``cy_implementation.pyx`` file to a
   ``cy_implementation.cxx`` file when SciPy is built. You never have to read
   this ``.cxx`` file, but you need to be aware of it for two reasons:

       * There would be a name conflict if one of your source C++ files already
         had the same name. This is easy to avoid by giving your ``.pyx``
         file a unique name as we have here.
       * You must refer to the name ``cy_implementation.cxx`` in ``setup.py``
         next.

#. In ``/scipy/stats/setup.py``, in the ``configuration`` function just before
   the ``return`` statement, add:

   ::

       # Build hello world demo
       config.add_data_files('cy_declaration.pxd')
       config.add_extension(
           'cy_implementation', sources=['cy_implementation.cxx',
                                         'cpp_implementation.cpp'])

    Here we add an extension named ``cy_implementation`` - yes, with the same
    name as the ``.pyx`` file you wrote and the ``.cxx`` file generated by
    Cython, from the Cython-generated ``.cxx`` file and the original ``.cpp``
    source.
     *Why exactly do we need to add the Cython declaration as a data file?*

#. Build SciPy. Note the addition of ``cy_implementation.cxx`` and a similarly
   named ``.pyd`` (or ``.so``, on Mac and Linux) *extension module* in the
   ``scipy/stats`` folder. The latter is the file from which your Python code
   can import Cython functions and classes.

#. At a Python prompt,

   ::

       from scipy.stats.cy_implementation import cy_hello_world
       cy_hello_world()

   The Cython function ``cy_hello_world``, which you can import and use just
   like a regular Python function, calls the C++ function
   ``hello_world``, which prints ``Hello World!`` to the console.

Example
-------

What is the simplest example in SciPy that would complement this guide?

.. _Cython: https://cython.org/
.. _Cython documentation: http://docs.cython.org/en/latest/
.. _header guards: https://www.learncpp.com/cpp-tutorial/header-guards/
.. _Header: https://www.learncpp.com/cpp-tutorial/header-files/
.. _preprocessor directives: https://www.learncpp.com/cpp-tutorial/introduction-to-the-preprocessor/
.. _extension module: https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html
.. _Cython tutorial: https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html

.. |pxd| replace:: ``pxd``
.. _pxd: https://cython.readthedocs.io/en/latest/src/tutorial/pxd_files.html

.. |pyx| replace:: ``pyx``
.. _pyx: https://cython.readthedocs.io/en/latest/src/tutorial/cython_tutorial.html

.. |cimport| replace:: ``cimport``
.. _cimport: https://cython.readthedocs.io/en/latest/src/userguide/sharing_declarations.html

.. |cdef| replace:: ``cdef``
.. _cdef: https://github.com/scipy/scipy/blob/master/scipy/optimize/setup.py

.. _Cython decorators: https://cython.readthedocs.io/en/latest/src/userguide/numpy_tutorial.html

.. |linprog-rs| replace:: ``scipy.optimize._linprog_rs.py``
.. _linprog-rs: https://github.com/scipy/scipy/blob/master/scipy/optimize/_linprog_rs.py

.. |bglu-dense| replace:: ``/scipy/optimize/_bglu_dense.pyx``
.. _bglu-dense: https://github.com/scipy/scipy/blob/master/scipy/optimize/_bglu_dense.pyx

.. |distutils| replace:: ``numpy.distutils``
.. _distutils: https://docs.scipy.org/doc/numpy/reference/distutils.html

.. |optimize-setup| replace:: ``scipy/optimize/setup.py``
.. _optimize-setup: https://github.com/scipy/scipy/blob/master/scipy/optimize/setup.py

.. _Cythonizing SciPy Code: https://youtu.be/K9bF7cjUJ7c
